################ config file for PENTrack ###############
# put comments after #

[GLOBAL]
# simtype: 1 => particles, 3 => deprecated, 4 => print cut through BField (see BCutPlane), 7 => print random points on surfaces to visualize geometry
# 8 => print microroughness distribution (see MRSolidAngleDRP), 9 => print integrated integrated microroughness distribution (see MRThetaIEnergy)
simtype 1

# number of primary particles to be simulated
simcount 1000

# max. simulation time [s]
simtime 1000

# path of file containing materials, paths are assumed to be relative to this config file's path
materials_file materials.in

# secondaries: set to 1 to also simulate secondary particles (e.g. decay protons/electrons) [0/1]
secondaries 1

#cut through B-field at time t (simtype == 4) (x1 y1 z1  x2 y2 z2  x3 y3 z3 num1 num2 t)
#define cut plane by three points and number of sample points in direction 1->2/1->3
BCutPlane	0.161 0 0.015	0.501 0 0.015	0.161 0 0.85	340	835  500

#parameters to be used for generating a 2d histogram for the mr diffuse reflection probability into a solid angle (simtype == 8)
#Param order: Fermi pot. [neV], Neut energy [neV], RMS roughness [nm], correlation length [nm], theta_i [0..pi/2]
MRSolidAngleDRP 220 200 1E-9 25E-9 0.1

#parameters to be used for generating a 2d histogram of the integrated diffuse reflection probabilitites of the incident angle vs energy of a neutron (simtype == 9)
#Parameter order: Fermi potential of the material, RMS roughness [nm], Correlation length [nm], starting angle [0..pi/2], ending angle [0..pi/2],
#starting neutron energy [neV], ending neutron energy [neV]
MRThetaIEnergy 54 2.5E-9 20E-9 0 1.570796327 0 1000

#Format used for logging output, can be "txt" for raw text, "ROOT" for ROOT trees and files, and "HDF5" for HDF5 files
logtype ROOT


[GEOMETRY]
############# Solids the program will load ################
#  Each solid has to be assigned unique ID and a material from above.
# IDs have to be larger than 0, ID 1 will be assumed to be the default medium which is always present.
# Particles absorbed in a solid will be flagged with the ID of the solid.
# The ID also defines the order in which overlapping solids are handled (highest ID will be considered first).
# If paths to StL files are relative they have to be defined relative to this config file.
# Ignore times are pairs of times [s] in between the solid will be ignored, e.g. 100-200 500-1000.
#ID	STLfile    material_name    ignore_times
1	ignored				default
2	spinflip_volume.STL		SpinFlipper
3	polarizer.STL			FePolarizerOnAl
4	storagevolume_60degfeeder_bellow.STL		PolishedSteel
5	guide_experiment.STL		PolishedSteel
6	guide_source.STL		PolishedSteel
7	guide_detector.STL		PolishedSteel
8	switch.STL			PolishedSteel
9	valve.STL			PolishedSteel
10	switch_flap_source.STL		PolishedSteel
#11	switch_flap_middle.STL		PolishedSteel
#12	switch_flap_detector.STL	PolishedSteel
13	foil_detector.STL		Al
14	UCNdet.STL			UCNdet
15	protdet.STL			Al
16	absorber_up.STL			PE	movingAbsorber
#17	absorber_middle.STL		PE
#18	absorber_down.STL		PE
#19	source.STL			UCNdet
20	source.STL			PolishedSteel



[SOURCE]
############ sourcemodes ###############
# STLvolume: source volume is given by a STL file, particles are created in the space completely enclosed in the STL surface
# boxvolume: particle starting values are diced in the given parameter range (x,y,z) [m,m,m]
# cylvolume: particle starting values are diced in the given parameter range (r,phi,z) [m,degree,m]
# Volume source produce velocity vectors according to the given angular distributions below.
# If PhaseSpaceWeighting is set to 1 for volume sources the energy spectrum is interpreted as a total-energy spectrum.
## The probability to find a particle at a certain initial position is then weighted by the available phase space,
## i.e. proportional to the square root of the particle's kinetic energy.
#
# STLsurface: starting values are on surfaces in the given STL-volume
# cylsurface: starting values are on surfaces in the cylindrical volume given by parameter range (r,phi,z) [m,degree,m]
# Surface sources produce velocity vectors cosine(theta)-distributed around the surface normal.
# An additional Enormal [eV] can be defined. This adds an additional energy boost to the velocity component normal to the surface.
########################################

sourcemode	STLsurface

STLfile		sourcevolume.STL	# STL volume used for STLvolume/STLsurface source, path is assumed relative to this config file

### parameter ranges for sourcemode cylvolume/cylsurface/boxvolume
#			r_min	r_max	phi_min	phi_max	z_min	z_max (cylvolume/cylsurface)
#parameters 0.16	0.5		0		360		0.005	1.145

#			x_min	x_max	y_min	y_max	z_min	z_max	(boxvolume)
#parameters	0		1		0		1		0		1
###

particle	neutron		# type of particle the source should create
ActiveTime	200			# time source is active for

### Optional params for a pulsed particle source. Requires ActiveTime > 0 and pulseGap > 0
pulseGap 0              # [s] Number of seconds between each pulse start
pulseWidth  0           # [s] Duration of a source pulse. If set to 0, each pulse becomes a delta function


Enormal		0					# give particles an energy boost normal to surface (surface sources only! see above)
PhaseSpaceWeighting	0			# weight initial particle density by available phase space (volume source only! see above)

### initial energy range [eV] and spectrum of particles
Emin 100e-9
Emax 300e-9
#spectrum sqrt(x)
spectrum 1.96616e39*x^5 - 0.00204264e36*x^4 + 0.834378e27*x^3 - 167.958e18*x^2 + 16674.8e9*x - 639317 # UCN spectrum in horizontal guide from FRM2 source

#Emin 5.5e-9
#Emax 85e-9
#spectrum 1.986*(x*1e9 - 5.562)*(1 - tanh(0.3962*(x*1e9 - 72.72))) # total energy spectrum of UCN in storage volume after cleaning

#Emin 20e-9
#Emax 115e-9
#spectrum 0.7818*(x*1e9 - 24.842)*(1 - tanh(0.2505*(x*1e9 - 97.510))) # total energy spectrum of low-field-seekers in storage volume after ramping

#Emin 0
#Emax 751
#spectrum ProtonBetaSpectrum(x)	# ProtonBetaSpectrum is a predefined function for proton energies from free-neutron decay

#Emin 0
#Emax 782e3
#spectrum ElectronBetaSpectrum(x)	# ElectronBetaSpectrum is a predefined function for electron energies from free-neutron decay

#Emin 0
#Emax 1
#spectrum MaxwellBoltzSpectrum(300, x)     # MaxwellBoltzSpectrum is a predefined function for gas molecules (first parameter is the temp. in Kelvin)


# Initial direction of particles
#  Volume sources only! Surface sources produce velocities cosine(theta)-distributed around the surface normal
phi_v_min 0		# min. azimuth angle of velocity [degree]
phi_v_max 360	# max. azimuth angle of velocity [degree]
phi_v 1			# differential initial distribution of azimuth angle of velocity

theta_v_min 0	# min. polar angle of velocity [degree]
theta_v_max 180	# max. polar angle of velocity [degree]
theta_v sin(x)	# differential initial distribution of polar angle of velocity


polarization 0	# initial polarization is randomly chosen, weighted by this variable (1: low-field-seekers only, -1: high-field-seekers only) [-1..1]


[FIELDS]
########### electric and magnetic fields ##########
# Tabulated maps:
# OPERA2D: a table of field values on a regular 2D grid exported from OPERA. It is assumed that the field is rotationally symmetric around the z axis.
# OPERA3D: a table of field values on a rectilinear 3D grid exported from OPERA
# COMSOL: a generic 3D table of magnetic field values on a rectilinear grid, e.g. exported from COMSOL
# 2D and 3D tables allow to scale coordinates with a given factor. Scaled coordinates are assumed to be in meters.
# Scaled magnetic fields are assumed to be in Tesla, scaled electric potentials in V.
# For 3D tables a BoundaryWidth [m] can be specified within which the field is smoothly brought to zero.
# Paths of table files are assumed to be relative to this config file's path. Table files can be gzip or bzip compressed.
#
# Several analytically calculated fields are available, see description for each field type below.
# All coordinates are defined in meters, currents in ampere, fields in Tesla
#
# Each line is preceded by a unique identifier. Entries with duplicate identifiers will overwrite each other
# For each field a time-dependent scaling factor (can be defined in the FORMULAS section) can be added.
# Note that rapidly changing fields might be missed by the trajectory integrator making too large time steps
##################################################
#2Dfield 	table-file	BFieldScale	EFieldScale	CoordinateScale
1 OPERA2D 	42_0063_PF80-24Coils-SameCoilDist-WP3fieldvalSI.tab.bz2	magnetRamp	1   1  ### this table file has SI units, the magnetic field is scaled with the 'magnetRamp' formula defined in the FORMULAS section below.

#3Dfield 	table-file	BFieldScale	EFieldScale	BoundaryWidth	CoordinateScale
#3 OPERA3D	3Dtable.tab	1		    1		    0		        1

#3Dfield 	table-file	BFieldScale	BoundaryWidth	CoordinateScale
#4 COMSOL	comsol.txt	1		    0		        1


# Simulate magnetic field from a current I flowing from point (x1, y1, z1) to (x2, y2, z2)
#Conductor		I		x1		y1		z1		x2		y2		z2		scale
5 Conductor		12500	0		0		-1		0		0		2		1


# ExponentialFieldX is described by:
# B_x = a1 * exp(- a2* x + a3) + c1
# B_y = y * a1 * a2 / 2 * exp(- a2* x + a3) + c2
# B_z = z * a1 * a2 / 2 * exp(- a2* x + a3) + c2
# Parameters a1, c1, and c2 should be units [Tesla]
# Field is turned off outside of the xyz min/max boundaries specified [meters]

# ExponentialFieldX a1  a2  a3  c1  c2  xmax  xmin  ymax  ymin  zmax  zmin scale
#6 ExponentialFieldX 5E-5 1  -4 0   0   3     -3     1     -1     1     -1  1


# LinearFieldZ is described by:
# B_z = a1*x + a2
# a1 = [T/m] and a2 = [T]
# Field is turned off outside of the xyz min/max boundaries specified [meters]

## LinearFieldZ a1      a2     xmax  xmin  ymax  ymin  zmax  zmin scale
#7 LinearFieldZ  2E-6   1E-6   0     -1     1     -1     1     -1   1


# EDMStaticB0GradZField defines a z-oriented field of strength edmB0z0 with a small gradient edmB0z0dz along z, leading to small x and y components.
# The origin and orientation of the z-axis can be adjusted with the edmB0[xyz]off parameters and a polar and azimuthal angle.
# The field is only evaluated within x/y/z min/max boundaries. If a BoundaryWidth is defined, the field will be brought smoothly to zero at these boundaries.

### EDMStaticB0GradZField   edmB0xoff edmB0yoff edmB0zoff pol_ang azm_ang edmB0z0 edmdB0z0dz BoundaryWidth xmax    xmin    ymax    ymin    zmax    zmin scale
#8 EDMStaticB0GradZField     0         0          0       0       0       1E-6    0          0             3       0      1       -1      1       -1      1


# B0GradZ is described by:
# B_z = a1/2 * z^2 + a2 z + z0
# dBdz = a1 * z + a2
# a1 = [T/m^2]; a2 = [T/m]; z0 = [T]
# Field is turned off outside of the xyz min/max boundaries specified [meters]

## B0GradZ    a1      a2     z0  xmax  xmin  ymax  ymin  zmax  zmin scale
#9 B0GradZ       0    0     1E-6     1     -1     1   -1     1  -1    1


# B0GradX2 is described by:
# B_z = (a_1 x^2 + a_2 x + a3) z + z0
# dBdz = a_1 x^2 + a_2 x + a3

## B0GradX2    a1      a2   a3     z0  xmax  xmin  ymax  ymin  zmax  zmin scale
#10 B0GradX2  1E-8    0      0       1E-6     1     -1     1     -1     1  -1   1


# B0GradXY is described by:
# B_z = a_1 xyz + a_2 z + z0
# dBdz =  a_1 xy + a_2
# Field is turned off outside of the xyz min/max boundaries specified [meters]

## B0GradXY    a1      a2     z0       xmax  xmin  ymax  ymin  zmax  zmin scale
#11 B0GradXY  1E-8       0     1E-6     1     -1     1     -1     1  -1   1


# B0_XY is described by:
# B_z = a_1 xy + z0
# B_y = a_1 xz
# B_x = a_1 yz
# Field is turned off outside of the xyz min/max boundaries specified [meters]

## B0_XY    a1    z0       xmax  xmin  ymax  ymin  zmax  zmin scale
#12 B0_XY   1E-7  1E-6        1     -1     1     -1     1  -1   1


# HarmonicExpansionBField defines a field composed of Legendre polynomials up to fifth order with coefficients G(l,m), see https://arxiv.org/abs/1811.06085, https://doi.org/10.1103/PhysRevA.99.042112.
# The origin can be adjusted with the [xyz]off parameters. When evaluating the field at certain coordinates, these offsets will be added to the given coordinates (active transformation).
# The G(l,m) parameters are defined by an arbitrary number of sets "l m G(l,m)" with 0 <= l <= 5 and -l-1 <= m <= l+1.
# The field is only evaluated within x/y/z min/max boundaries. If a BoundaryWidth is defined, the field will be brought smoothly to zero outside these boundaries.

#HarmonicExpansionBField   xoff yoff zoff BoundaryWidth xmax xmin ymax ymin zmax zmin scale  l  m  G(l,m)  l  m  G(l,m) ...
#13 HarmonicExpansionBField   0    0    0          0.01    1   -1    1   -1    1   -1     1  1  0      30  0  0       0


# EDMStaticEField defines an homogeneous electric field, simply set all three components of the electric-field vector.

#EDMStaticEField    Ex  Ey  Ez  scale
#14 EDMStaticEField 0   0   1e6 1


## CustomBField calculates the three field components from formulas defined in the FORMULAS section.
# Each component can depend on the spatial coordinates x, y, z and a time variable t. Field derivatives are approximated numerically using a five-point stencil method.
# The field is only evaluated within x/y/z min/max boundaries. If a BoundaryWidth is defined, the field will be brought smoothly to zero at these boundaries.

# CustomBField Bx-formula By-formula Bz-formula xmax xmin ymax ymin zmax zmin BoundaryWidth scale
#15 CustomBField Bx By Bz 0 0 0 0 0 0 0 1

######### default values for particle-specific settings ############
[PARTICLES]
tau 0				# exponential decay lifetime [s], 0: no decay
tmax 9e99			# max simulation time [s]
lmax 9e99			# max trajectory length [m]

######### Logging options. You can add or remove any of the listed variables in the *logvars lists, or any combination defined in a formula in the FORMULAS section #######
######### If the *logfilter option is set to a formula in the FORMULAS section, the particle will only be logged if the result of the formula returns true          #######
endlog 1			# print initial and final state to file [0/1]
endlogvars jobnumber particle tstart xstart ystart zstart vxstart vystart vzstart polstart Sxstart Systart Szstart Hstart Estart Bstart Ustart solidstart tend xend yend zend vxend vyend vzend polend Sxend Syend Szend Hend Eend Bend Uend solidend stopID Nspinflip spinflipprob Nhit Nstep trajlength Hmax wL
endlogfilter

tracklog 0			# print complete trajectory to file [0/1]
tracklogvars jobnumber particle polarisation t x y z vx vy vz H E Bx dBxdx dBxdy dBxdz By dBydx dBydy dBydz Bz dBzdx dBzdy dBzdz Ex Ey Ez V
trackloginterval 5e-3	# min. distance interval [m] between track points in tracklog file
tracklogfilter

hitlog 0			# print geometry hits to file [0/1]
hitlogvars jobnumber particle t x y z v1x v1y v1z pol1 v2x v2y v2z pol2 nx ny nz solid1 solid2
hitlogfilter

snapshotlog 1		# print initial state and state at certain times to file [0/1]
snapshots 0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490 500 510 520 530 540 550 560 570 580 590 600 610 620 630 640 650 660 670 680 690 700 710 720 730 740 750 760 770 780 790 800 810 820 830 840 850 860 870 880 890 900 910 920 930 940 950 960 970 980 990 1000 # times [s] at which to take snapshots
snapshotlogvars jobnumber particle tstart xstart ystart zstart vxstart vystart vzstart polstart Sxstart Systart Szstart Hstart Estart Bstart Ustart solidstart tend xend yend zend vxend vyend vzend polend Sxend Syend Szend Hend Eend Bend Uend solidend stopID Nspinflip spinflipprob Nhit Nstep trajlength Hmax wL
snapshotlogfilter

spinlog 0			# print spin trajectory to file [0/1]
spinlogvars jobnumber particle t x y z Sx Sy Sz Wx Wy Wz Bx By Bz
spinloginterval 5e-7# min. time interval [s] between track points in spinlog file
spinlogfilter
spintimes	500 700	# do spin tracking between these points in time [s]
Bmax 0.1			# do spin tracking when absolute magnetic field is below this value [T]
flipspin 0			# do Monte Carlo spin flips when magnetic field surpasses Bmax [0/1]
interpolatefields 0	# Interpolate magnetic and electric fields for spin tracking between trajectory step points [0/1]. This will speed up spin tracking in high magnetic fields, but might break spin tracking in weak, quickly oscillating fields!


############# set options for individual particle types, overwrites above settings ###############
[neutron]
tau 880.1

[proton]
tmax 3e-3

[electron]
tmax 1e-5

[mercury]

[xenon]


############ define formulas used for CustomBField or output to log files
## see the supported syntax in the ExprTk documentation at http://partow.net/programming/exprtk/index.html
[FORMULAS]
magnetRamp  t < 400 ? 0 : (t < 500 ? 0.01*(t-400) : (t < 700 ? 1 : (t<800?0.01*(800-t) : 0)))    # ramp magnetic field from 0% to 100% between t=400s and t=500s, then ramp back down between t=700s and t=800s

vabs        sqrt(vxstart^2 + vystart^2 + vzstart^2)     # for example, you could now add "vabs" to the list of endlogvars to print the absolute inital velocity to the endlog
detected    solidend == 14                              # for example, you could set this as an endlogfilter to only log particles that are absorbed in the detector

Bx 1e-7*x                                               # These are the field components used for the CustomBField defined in the FIELDS section
By 0.
Bz 1e-6*x

[TRANSFORMATIONS]
movingAbsorber  500 (0 0 0) (0 0 0) (0 0 0) (0 0 0)  520 (0 0 -0.6) (0 0 0) (0 0 0) (0 0 0)  540 (0 0 -0.6) (0 0 0) (0 0 0) (0 0 0)  560 (0 0 0) (0 0 0) (0 0 0) (0 0 0)
