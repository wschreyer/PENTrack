[MATERIALS]
#name		FermiReal [neV]		FermiImag [neV]		DiffuseReflectionProbability
default		0			0			0
PolishedSteel	183.			0.0852			0.05
PE		-8.66			0.49			0.5
Ti		-51.1			0.0432			0.2
Cu		171			0.0726			0.2
Al		54.1			0.00756			0.2
DLC		269			0.0625			0.01  
UCNdet		0.1			1			0		# high efficiency assumed

[GEOMETRY]
#solids the program will load, particle absorbed in the solid will be flagged with the ID of the solid
#IDs have to be larger than 0 and unique, ID 1 will be assumed to be the default medium which is always present
#the ID also defines the order in which overlapping solids are handled (highest ID will be considered first)
#ignore times are pairs of times [s] in between the solid will be ignored, e.g. 100-200 500-1000
#ID	STLfile				material_name		ignore_times
1	ignored				default
2	in/storagevol.STL		PolishedSteel
3	in/guide.STL			PolishedSteel
4	in/valve.STL			PolishedSteel		0-200 500-1000
5	in/UCNdet.STL			UCNdet
6	in/protdet.STL			Al
7	in/absorber.STL			PE

[SOURCE]
############ sourcemodes ###############
# volume: source volume is given by a STL file, particles are created in the space completely surrounded by the STL-surface
# customvol: particle starting values are diced in the given parameter range (r,phi,z)
# surface: starting values are on triangles whose vertices are all in the given STL-volume
# customsurf: starting values are on triangles which have at least one vertex in the given parameter range (r,phi,z)
########################################

#customxxx	r_min	r_max	phi_min	phi_max		z_min	z_max	ActiveTime	Enormal (customsurf only)
#customsurf	0.123	0.495	0		360			0.003	1.145	200			0
#customvol	0.125	0.495	0		360			0.005	1.145	0

#inital conditions will be randomly picked from this volume
#sourcetype 	STL-file		ActiveTime	Enormal (surface only)
surface 	in/source.STL		200		0
#volume 	in/source.STL		0

[FIELDS]
#field 		table-file			BFieldScale	EFieldScale	NullFieldTime	RampUpTime	FullFieldTime	RampDownTime
2Dtable 	in/42_0063_PF80fieldval.tab	1		1		400		100		200		100

#InfiniteWireZ		I		x		y
#InfiniteWireZCenter	I
#FiniteWire		I		x1		y1		z1		x2		y2		z2
#FiniteWireX/Y/Z	I		x1/y1/z1	x2/y2/z2	z/z/z1		#/#/z2
#FiniteWireZCenter	I		z1		z2
#FullRacetrack		I		z1		z2		r

#FullRacetrack		2250		-0.15		1.35		0.6

FiniteWireZCenter	12500		-1		2

############# How to use STL-files ############
# STL files use a list of triangles to describe 3D-surfaces (see here for file format: http://www.ennex.com/~fabbers/StL.asp)
# They can be created with Solidworks via "Datei - Speichern unter... - Dateityp STL - Save"
# Note the "Optionen..." button in the Save dialog, there you can change format (only binary supported), resolution, coordinate system etc.
# If you want to export several parts of an Solidworks assembly you can do the following (if you know a nicer/easier way, please add it here)
# - select the part(s) to be exported and rightclick
# - select "Auswahl invertieren" and then use "Unterdruecken" on all other parts
# - WARNING! You might not be able to undo the "Unterdruecken"-command but have to reload the assembly, so save any changes before that!
# - now you can save that single part as STL (make sure the option "STL-Ausgabedaten nicht auf positiven Raum uebertragen" is checked
#		and to use the same coordinate system for every part or else the different parts will not fit together)
# You can check the positioning of the parts with several tools: MeshLab, SolidView, Minimagics, Solidworks...
# Solidworks makes sure that the surface normals always point outside a solid body. This is used to check if the source volume overlaps
#	with other solids so that no particle is created inside a solid body.
# memory consumption of loading STL-files into program is about 5 times the file size
